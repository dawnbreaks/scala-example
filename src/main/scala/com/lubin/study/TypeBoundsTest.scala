
package com.lubin.study

import com.twitter.finagle.http.path.Path
import com.twitter.finagle.http.path._
import scala.reflect.ClassTag
import scala.Ordered._
object TypeBoundsTest extends App {

  //ClassTag example
  def tabulate[T: ClassTag](len: Int, f: Int => T) = {
    var xs = new Array[T](len)
    for (i <- 0 until len) xs(i) = f(i)
    xs
  }

  var xs = tabulate[String](11, num => {
    num + ""
  })
  xs.map { x => println(x) }

  //context bound example
  trait LabelMaker[T] {
    def apply(value: T): String
  }
  case class Address(no: Int, street: String, city: String, state: String, zip: String)

  implicit object AddesrsLabelMaker extends LabelMaker[Address] {
    //the above implicit var addressLabelMaker = new LabelMaker[Address] 
    def apply(address: Address): String = {
      import address._
      "Generated by AddesrsLabelMaker|%d %s, %s, %s - %s".format(no, street, city, state, zip)
    }
  }
  
  def printLabel[T: LabelMaker](t: T) = {
    println(implicitly[LabelMaker[T]].apply(t))
  }
  
  //implicit import context bound object
  printLabel(Address(100, "Monroe Street", "Denver", "CO", "80231"))
  
  
  
  //implicit type conversion example
  implicit def addr2Lable(a :Address):LabelMaker[Address] = {
      AddesrsLabelMaker
  }
  def printlnLable[T](l :LabelMaker[T]) = println(l)
  printlnLable(Address(100, "Monroe Street", "Denver", "CO", "80231"))
  
  
     val s1 = "Hello"
    val s2 = "Hello"
    val s3 = "Goodbye"
    val s4: String = null
    val s5 = "H" + "ello"
     
    if (s1 > s2) println("s1 == s2, good")
    if (s1 == s3) println("s1 == s3, bad")
    if (s1 == s4) println("s1 == s4, bad")
    if (s1 == s5) println("s1 == s5, good")
}



